/* 
this source was generated by vespene eclipse plugin
template file: springJpaDAOImpl.ftl 
*/
	
package ${SpringServices.daoImplementationPackage};

import java.util.Collection;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.Query;

import org.springframework.stereotype.Repository;

import ${SpringServices.daoInterfacePackage}.${SpringServices.daoInterfaceClassName};

<#list SpringServices.entity as entity>
import ${entity.entityPackage};
</#list>

@Repository
public class ${SpringServices.daoImplementationClassName} implements ${SpringServices.daoInterfaceClassName} {

	@PersistenceContext
	protected EntityManager entityManager;

	public ${SpringServices.daoImplementationClassName}() {
		super();
	}

<#list SpringServices.entity as entity>
	
	@Override
	public ${entity.entityName} find${entity.entityName}ById(${entity.pkType} id) {
		return entityManager.find(${entity.entityName}.class, id);	
	}	
	
	@SuppressWarnings("unchecked")
	@Override
	public List<${entity.entityName}> findAll${entity.entityName}() {
		return entityManager.createQuery( "select ${entity.entityName?lower_case} from " + ${entity.entityName}.class.getName() + " ${entity.entityName?lower_case}").getResultList();
	}
	
	
	@SuppressWarnings("unchecked")
	@Override
	public List<${entity.entityName}> find${entity.entityName}ByExpressionQuery(String expression, Map<String, Object> parameters, int firstResult, int maxResults) {
		Query query = entityManager.createQuery( expression );
		if(firstResult>0)  
			query.setFirstResult(firstResult);  
		if(maxResults>0)  
			query.setMaxResults(maxResults);		    	  
	                
		Iterator<String> iter = parameters.keySet().iterator();
		while (iter.hasNext()) {
			String name = (String) iter.next();
			Object value = (Object) parameters.get(name);
			query.setParameter(name,value);
		}		                
	                
		return query.getResultList();		
	}
	
	@Override
	public int find${entity.entityName}ByExpressionRecordCount(String expression, Map<String, Object> parameters) {
        Query query = entityManager.createQuery( expression );
        
	    Iterator<String> iter = parameters.keySet().iterator();
	    while (iter.hasNext()) {
			String name = (String) iter.next();
			Object value = (Object) parameters.get(name);
			query.setParameter(name,value);
		}		                
	                
		return Integer.valueOf( query.getResultList().get(0).toString() );		
	}
	
	@Override
	public void persist${entity.entityName}(${entity.entityName} ${entity.entityName?lower_case}) {
		entityManager.persist(${entity.entityName?lower_case});
	}

	@Override
	public void remove${entity.entityName}(${entity.entityName} ${entity.entityName?lower_case}) {
		entityManager.remove(entityManager.merge(${entity.entityName?lower_case}));
	}

	@Override
	public void removeCollection${entity.entityName}(Collection<${entity.entityName}> list${entity.entityName}) {
		for(Iterator<${entity.entityName}> it = list${entity.entityName}.iterator(); it.hasNext(); ) {
			${entity.entityName} ${entity.entityName?lower_case} = (${entity.entityName}) it.next();
			entityManager.remove(entityManager.merge(${entity.entityName?lower_case}));
		}
	}
</#list>  

	@SuppressWarnings("unchecked")
	@Override
	public List findByNamedQuery(String queryName) {
		return entityManager.createNamedQuery(queryName).getResultList();
	}	
	
	
	@SuppressWarnings("unchecked")
	@Override
	public List findByNamedQuery(String queryName, String[] paramNames, Object[] paramValues) {
		if (paramNames.length != paramValues.length) {
			throw new IllegalArgumentException();
		}
		Map<String, Object> map = new java.util.HashMap<String, Object>(paramNames.length);
		for (int i = 0; i < paramNames.length; ++i) {
			map.put(paramNames[i], paramValues[i]);
		}
		
		Query queryObject = entityManager.createNamedQuery(queryName);
		if (map != null) {
			for (Map.Entry<String, ?> entry : map.entrySet()) {
				queryObject.setParameter(entry.getKey(), entry.getValue());
			}
		}
		
		return queryObject.getResultList();				
	}		

}